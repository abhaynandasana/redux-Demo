{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst counterInitialState = {\n  counter: 0,\n  showCounter: true\n};\nconst authInitialState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: counterInitialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increse(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    backToZero(state) {\n      state.counter = 0;\n      console.log('pressed 0');\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.IsAuthenticated = true;\n    },\n\n    logout(state) {\n      state.IsAuthenticated = false;\n    }\n\n  }\n}); // const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const authActions = authSlice.actions;\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/lcom/Documents/react js/18 Diving into Redux (An Alternative To The Context API)/01-starting-project/src/store/index.js"],"names":["createStore","createSlice","configureStore","counterInitialState","counter","showCounter","authInitialState","isAuthenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increse","action","payload","backToZero","console","log","toggleCounter","authSlice","login","IsAuthenticated","logout","store","reducer","auth","authActions","actions","counterActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB;AAEA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEP,mBAFiB;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACT,OAAN;AACD,KAHO;;AAIRU,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACT,OAAN;AACD,KANO;;AAORW,IAAAA,OAAO,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACrBH,MAAAA,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgBY,MAAM,CAACC,OAAvC;AACD,KATO;;AAURC,IAAAA,UAAU,CAACL,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACT,OAAN,GAAgB,CAAhB;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAbO;;AAcRC,IAAAA,aAAa,CAACR,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACR,WAA3B;AACD;;AAhBO;AAHqB,CAAD,CAAhC;AAuBA,MAAMiB,SAAS,GAAGrB,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEJ,gBAFc;AAG5BK,EAAAA,QAAQ,EAAE;AACRY,IAAAA,KAAK,CAACV,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACW,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRC,IAAAA,MAAM,CAACZ,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACW,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,KAAK,GAAGxB,cAAc,CAAC;AAC3ByB,EAAAA,OAAO,EAAE;AAAEvB,IAAAA,OAAO,EAAEI,YAAY,CAACmB,OAAxB;AAAiCC,IAAAA,IAAI,EAAEN,SAAS,CAACK;AAAjD;AADkB,CAAD,CAA5B;AAGA,OAAO,MAAME,WAAW,GAAGP,SAAS,CAACQ,OAA9B;AACP,OAAO,MAAMC,cAAc,GAAGvB,YAAY,CAACsB,OAApC;AAEP,eAAeJ,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst counterInitialState = { counter: 0, showCounter: true };\nconst authInitialState = { isAuthenticated: false };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: counterInitialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increse(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    backToZero(state) {\n      state.counter = 0;    \n      console.log('pressed 0')\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.IsAuthenticated = true;\n    },\n    logout(state) {\n      state.IsAuthenticated = false;\n    },\n  },\n});\n// const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\nexport const authActions = authSlice.actions;\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}