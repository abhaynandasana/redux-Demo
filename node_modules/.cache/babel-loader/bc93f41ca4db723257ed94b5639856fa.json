{"ast":null,"code":"import { createStore } from \"redux\";\nimport counterSlice from \"./CounterSlice\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst authInitialState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/lcom/Documents/react js/18 Diving into Redux (An Alternative To The Context API)/01-starting-project/src/store/index.js"],"names":["createStore","counterSlice","createSlice","configureStore","authInitialState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","auth","authActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB;AAGA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEJ,gBAFc;AAG5BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,CAACC,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACN,eAAN,GAAwB,IAAxB;AAED,KAJO;;AAKRO,IAAAA,MAAM,CAACD,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACN,eAAN,GAAwB,KAAxB;AACD;;AAPO;AAHkB,CAAD,CAA7B,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMQ,KAAK,GAAGV,cAAc,CAAC;AAC3BW,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEd,YAAY,CAACa,OAAxB;AAAiCE,IAAAA,IAAI,EAAEV,SAAS,CAACQ;AAAjD;AADkB,CAAD,CAA5B;AAGA,OAAO,MAAMG,WAAW,GAAGX,SAAS,CAACY,OAA9B;AAEP,eAAeL,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport counterSlice from \"./CounterSlice\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst authInitialState = { isAuthenticated: false };\n\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n// const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\nexport const authActions = authSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}