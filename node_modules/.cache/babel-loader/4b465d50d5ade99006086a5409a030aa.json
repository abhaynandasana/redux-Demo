{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst counterInitialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increse(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    backToZero(state) {\n      state.counter = 0;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: 'Auth',\n  initialState: counterInitialState\n}); // const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/lcom/Documents/react js/18 Diving into Redux (An Alternative To The Context API)/01-starting-project/src/store/index.js"],"names":["createStore","createSlice","configureStore","counterInitialState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increse","action","payload","backToZero","toggleCounter","authSlice","store","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,YAAY,GAAIL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,SAD0B;AAEhCC,EAAAA,YAFgC;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHO;;AAIRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KANO;;AAORS,IAAAA,OAAO,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACrBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACD,KATO;;AAURC,IAAAA,UAAU,CAACL,KAAD,EAAO;AACfA,MAAAA,KAAK,CAACP,OAAN,GAAc,CAAd;AACD,KAZO;;AAaRa,IAAAA,aAAa,CAACN,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,WAAN,GAAkB,CAACM,KAAK,CAACN,WAAzB;AACD;;AAfO;AAHsB,CAAD,CAAjC;AAsBA,MAAMa,SAAS,GAAEjB,WAAW,CAAC;AAC3BM,EAAAA,IAAI,EAAC,MADsB;AAE3BC,EAAAA,YAAY,EAAGL;AAFY,CAAD,CAA5B,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMgB,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAACd,YAAY,CAACc;AADM,CAAD,CAA5B;AAGA,OAAO,MAAMC,cAAc,GAAEf,YAAY,CAACgB,OAAnC;AAEP,eAAeH,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice,configureStore } from \"@reduxjs/toolkit\";\n\nconst counterInitialState = { counter: 0, showCounter: true };\nconst counterSlice =  createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increse(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    backToZero(state){\n      state.counter=0;\n    },\n    toggleCounter(state) {\n      state.showCounter=!state.showCounter;\n    },\n  },\n});\n\nconst authSlice =createSlice({\n  name:'Auth',\n  initialState : counterInitialState,\n});\n// const counterReduce = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - action.num,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer:counterSlice.reducer\n})\nexport const counterActions =counterSlice.actions;\n\nexport default store;\n   "]},"metadata":{},"sourceType":"module"}